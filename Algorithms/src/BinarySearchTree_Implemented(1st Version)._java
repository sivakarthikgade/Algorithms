
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * 
 * @author Siva Karthik Gade
 * @assumptions
 * 1. Each node will have unique value
 *
 */
public class BinarySearchTree {

	public BinarySearchTree() {
	}

	public Node constructBinaryTree(int n, List<Integer> pTree, List<Integer> iTree) {
		if(pTree == null || iTree == null || pTree.size() == 0 || iTree.size() == 0)
			return null;

		Node root = new Node(pTree.get(n-1));
		int indexOfRoot = iTree.indexOf(root.id);
		root.leftChild = constructBinaryTree(indexOfRoot, pTree.subList(0, indexOfRoot), iTree.subList(0, indexOfRoot));
		root.rightChild = constructBinaryTree(n-indexOfRoot-1, pTree.subList(indexOfRoot, n-1), iTree.subList(indexOfRoot+1, n));

		root.treeSize = 1 + (root.leftChild!=null?root.leftChild.treeSize:0) + (root.rightChild!=null?root.rightChild.treeSize:0);

		if((root.leftChild==null || root.leftChild.maxId<root.id)&&(root.rightChild==null || root.id<root.rightChild.minId))
			root.isBST = true;
		else
			root.isBST = false;

		if(root.isBST) {
			if(root.leftChild == null && root.rightChild == null) {
			} else if(root.leftChild == null && root.rightChild != null) {
				root.maxId = root.rightChild.maxId;
			} else if(root.leftChild != null && root.rightChild == null) {
				root.minId = root.leftChild.minId;
			} else {
				if(!(root.minId < root.leftChild.minId && root.minId < root.rightChild.minId))
					root.minId = root.leftChild.minId < root.rightChild.minId ? root.leftChild.minId : root.rightChild.minId;
				if(!(root.maxId > root.leftChild.maxId && root.maxId > root.rightChild.maxId))
					root.maxId = root.leftChild.maxId > root.rightChild.maxId ? root.leftChild.maxId : root.rightChild.maxId;
			}
		}
		return root;
	}
	
	public int getMaxBSTSize(Node root) {
		if(root == null) 
			return -1;

		if(root.isBST) {
			return root.treeSize;
		} else {
			int lSize = getMaxBSTSize(root.leftChild);
			int rSize = getMaxBSTSize(root.rightChild);
			return lSize > rSize ? lSize : rSize;
		}
	}
	
	public static void main(String args[]) {
		BinarySearchTree bst = new BinarySearchTree();
		
		int argsCnt = 0;
		int dataSetsCnt = Integer.parseInt(args[argsCnt++]);
		for(int i = 1; i <= dataSetsCnt; i++) {
			int nodeCnt = Integer.parseInt(args[argsCnt++]);
			List<Integer> pTree = new ArrayList<Integer>();
			List<Integer> iTree = new ArrayList<Integer>();
			for(int j = 1; j <= nodeCnt; j++) {
				pTree.add(Integer.parseInt(args[argsCnt++]));
			}
			for(int j = 1; j <= nodeCnt; j++) {
				iTree.add(Integer.parseInt(args[argsCnt++]));
			}
			Node root = bst.constructBinaryTree(nodeCnt, pTree, iTree);
			int size = bst.getMaxBSTSize(root);
			System.out.println("Size of max BST in input is: "+size);
		}
	}
}
